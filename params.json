{"name":"Arcondicionado2.0","tagline":"Exercício 5 de 8 da Lista de Padrões de Projeto","body":"### Diagrama do Padrão Mediador Implementado\r\n\r\nO diagrama abaixo representa como o padrão mediador foi implementado nesse projeto, reaproveitando-se da versão anterior e fazendo as modificações necessárias\r\n\r\n![](https://github.com/izabely-furtado/ArCondicionado2.0/blob/master/diagramas/Class%20DiagramMediator.png?raw=true)\r\n\r\n### Explicação/Modificações\r\n\r\nBasicamente esta implementação foi feita em cima do código já existente, que se encontra no [Link Ar Condicionado](http://izabely-furtado.github.io/ArCondicionado/), assim, tudo referente ao padrão usado anteriormente está explicado no link indicado.\r\n\r\nAs mudanças ocorreram primordialmente referentes a:\r\n* mudança no método **+notifyObservers()** assim como demonstrado no diagrama. \r\n* criação do atributo mediador em Sensor e os métodos para enviar e receber mensagem.\r\n* criação das classes de cada um dos 3 sensores que estendem a classe Sensor e implementam o método **+receberMensagem(String msg)** e possuem um mediador.\r\n* criação da interface Mediator que obriga a classe MensagemMediator implementar **+enviar(String msg, Sensor sensor)**.\r\n* criação da classe MensagemMediator, que será melhor definida a seguir:\r\n\r\n`\r\npublic class MensagemMediator implements Mediator{\r\n    List<Sensor> sensores;\r\n    \r\n    public MensagemMediator(){\r\n        sensores = new ArrayList();\r\n    }\r\n    \r\n    public void addSensor(Sensor s){\r\n        this.sensores.add(s);\r\n    }\r\n    \r\n    @Override\r\n    public void enviar(String mensagem, Sensor sensor) {\r\n        for (Sensor s : this.sensores) {\r\n            if (s != sensor) {\r\n                definirProtocolo(s);\r\n                s.receberMensagem(mensagem);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private void definirProtocolo(Sensor sensor) {\r\n        if (sensor instanceof Sensor1) {\r\n            System.out.println(\"Protocolo Sensor1\");\r\n        } else if (sensor instanceof Sensor2) {\r\n            System.out.println(\"Protocolo Sensor2\");\r\n        } else if (sensor instanceof Sensor3) {\r\n            System.out.println(\"Protocolo Sensor3\");\r\n        }\r\n        else{\r\n            throw new UnsupportedOperationException(\"Sensor não suportado\");\r\n        }\r\n    }\r\n    \r\n}\r\n`\r\n\r\n### Motivações\r\n\r\n* Diminuir a complexidade de relacionamentos entre objetos, garantindo assim que todos fiquem mais livres para sofrer mudanças, bem como facilitando a introdução de novos tipos de objetos ao relacionamento.\r\n\r\n* Centralização da lógica de controle de comunicação entre os objetos, imagine que o protocolo de comunicação com o Android precisasse ser alterado, a mudança seria em um local bem específico da classe Mediator.\r\n\r\n* Centraliza o controle dos objetos Sensor.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}